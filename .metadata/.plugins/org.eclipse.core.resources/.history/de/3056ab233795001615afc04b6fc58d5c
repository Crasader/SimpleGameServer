package com.wq.gameServer.handler;

import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundMessageHandlerAdapter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.wq.entity.protobuf.Protocol.protocol;
import com.wq.gameServer.service.Service;

public class MessageHandler extends ChannelInboundMessageHandlerAdapter<protocol>{
	
	private Map<Integer, Channel> channels = new HashMap<>();
	private List<protocol> messages = new CopyOnWriteArrayList<>();
	private Map<String, Service> services;
	Logger logger = LoggerFactory.getLogger("Logger");
	
	public MessageHandler(){
		ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
		executor.scheduleAtFixedRate(handleTask, 0, 100, TimeUnit.MILLISECONDS);
	}

	@Override
	public void messageReceived(ChannelHandlerContext ctx, protocol msg)
			throws Exception {
		int fromId = msg.getFromId();
		channels.put(fromId, ctx.channel());
		messages.add(msg);
		
		// 同步问题，效率而准确的处理，CopyOnWriteArrayList和原子容器
	}

	public void write(protocol msg){
		int toId = msg.getToId();
		if(!channels.containsKey(toId)){
			throw new NullPointerException();
		}
		Channel channel = channels.get(toId);
		if(!channel.isActive()){
			throw new IllegalStateException();
		}
		channel.write(msg);
	}
	
	private Runnable handleTask = new Runnable() {
		
		@Override
		public void run() {
			if(messages.size() <= 0){
				return;
			}
			List<protocol> tempMessages = new ArrayList<>();
			tempMessages.addAll(messages); // 同上，需要合适的同步处理
			messages.clear();
			for(protocol msg : tempMessages){
				String serviceName = msg.getName().split("_")[0];
				if(services.containsKey(serviceName)){
					try {
						services.get(serviceName).service(msg);
					} catch (Exception e) {
						logger.error("In MessageHandler : "+e.getMessage());
						continue;
					}
				}
			}
		}
	};

	public Map<String, Service> getServices() {
		return services;
	}

	public void setServices(Map<String, Service> services) {
		this.services = services;
	}


}
